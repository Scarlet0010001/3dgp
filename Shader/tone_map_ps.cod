//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer POST_EFFECT_CONSTANTS
// {
//
//   float brightness;                  // Offset:    0 Size:     4 [unused]
//   float contrast;                    // Offset:    4 Size:     4 [unused]
//   float hue;                         // Offset:    8 Size:     4 [unused]
//   float saturation;                  // Offset:   12 Size:     4 [unused]
//   float bokeh_aperture;              // Offset:   16 Size:     4 [unused]
//   float bokeh_focus;                 // Offset:   20 Size:     4 [unused]
//   float exposure;                    // Offset:   24 Size:     4
//   float post_effect_options;         // Offset:   28 Size:     4 [unused]
//   float4 projection_texture_intensity;// Offset:   32 Size:    16 [unused]
//   row_major float4x4 projection_texture_transforms;// Offset:   48 Size:    64 [unused]
//   float3 colorize;                   // Offset:  112 Size:    12
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// sampler_states[0]                 sampler      NA          NA             s0      1 
// texture_map                       texture  float4          2d             t0      1 
// POST_EFFECT_CONSTANTS             cbuffer      NA          NA            cb8      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB8[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 5
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.texcoord.x; v1.y <- pin.texcoord.y; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 76 "C:\Users\2220411\Desktop\課題\自作ライブラリ\描画とゲープロmark2\描画とゲープロ\HLSL\tone_map_ps.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0  // r0.x <- sampled_color.x; r0.y <- sampled_color.y; r0.z <- sampled_color.z; r0.w <- sampled_color.w

#line 77
mov r0.xyz, r0.xyzx  // r0.x <- fragment_color.x; r0.y <- fragment_color.y; r0.z <- fragment_color.z

#line 78
mov r0.w, r0.w  // r0.w <- alpha

#line 84
nop 
mov r0.xyz, r0.xyzx
mov r1.x, cb8[1].z

#line 56
max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)

#line 58
mov r1.y, l(0.150000)  // r1.y <- A

#line 59
mov r1.z, l(0.500000)  // r1.z <- B

#line 60
mov r1.w, l(0.100000)  // r1.w <- C

#line 61
mov r2.x, l(0.200000)  // r2.x <- D

#line 62
mov r2.y, l(0.020000)  // r2.y <- E

#line 63
mov r2.z, l(0.300000)  // r2.z <- F

#line 64
mov r2.w, l(11.200000)  // r2.w <- W

#line 66
mul r0.xyz, r1.xxxx, r0.xyzx

#line 67
mul r3.xyz, r0.xyzx, r1.yyyy
mul r1.x, r1.z, r1.w
add r3.xyz, r1.xxxx, r3.xyzx
mul r3.xyz, r0.xyzx, r3.xyzx
mul r1.x, r2.y, r2.x
add r3.xyz, r1.xxxx, r3.xyzx
mul r4.xyz, r0.xyzx, r1.yyyy
add r4.xyz, r1.zzzz, r4.xyzx
mul r0.xyz, r0.xyzx, r4.xyzx
mul r1.x, r2.z, r2.x
add r0.xyz, r0.xyzx, r1.xxxx
div r0.xyz, r3.xyzx, r0.xyzx
div r1.x, r2.y, r2.z
mov r3.xyz, -r1.xxxx
add r0.xyz, r0.xyzx, r3.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z

#line 68
mul r1.x, r1.y, r2.w
mul r1.w, r1.z, r1.w
add r1.x, r1.w, r1.x
mul r1.x, r1.x, r2.w
mul r1.w, r2.y, r2.x
add r1.x, r1.w, r1.x
mul r1.y, r1.y, r2.w
add r1.y, r1.z, r1.y
mul r1.y, r1.y, r2.w
mul r1.z, r2.z, r2.x
add r1.y, r1.z, r1.y
div r1.x, r1.x, r1.y
div r1.y, r2.y, r2.z
mov r1.y, -r1.y
add r1.x, r1.y, r1.x  // r1.x <- white

#line 69
div r0.xyz, r0.xyzx, r1.xxxx

#line 70
log r0.xyz, r0.xyzx
mul r0.xyz, r0.xyzx, l(0.434783, 0.434783, 0.434783, 0.000000)
exp r0.xyz, r0.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z

#line 71
mov r0.xyz, r0.xyzx  // r0.x <- <uncharted2_tonemapping return value>.x; r0.y <- <uncharted2_tonemapping return value>.y; r0.z <- <uncharted2_tonemapping return value>.z

#line 84
mov r0.xyz, r0.xyzx  // r0.x <- fragment_color.x; r0.y <- fragment_color.y; r0.z <- fragment_color.z

#line 94
mul o0.xyz, r0.xyzx, cb8[7].xyzx
mov o0.w, r0.w
ret 
// Approximately 54 instruction slots used
