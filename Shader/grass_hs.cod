//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer SCENE_CONSTANTS
// {
//
//   row_major float4x4 view;           // Offset:    0 Size:    64 [unused]
//   row_major float4x4 projection;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 view_projection;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverse_projection;// Offset:  192 Size:    64 [unused]
//   row_major float4x4 inverse_view_projection;// Offset:  256 Size:    64 [unused]
//   float4 directional_light_direction;// Offset:  320 Size:    16 [unused]
//   float4 directional_light_color;    // Offset:  336 Size:    16 [unused]
//   float4 omni_light_position;        // Offset:  352 Size:    16 [unused]
//   float4 omni_light_color;           // Offset:  368 Size:    16 [unused]
//   float4 rimlight_color;             // Offset:  384 Size:    16 [unused]
//   float4 camera_position;            // Offset:  400 Size:    16 [unused]
//   float4 camera_focus;               // Offset:  416 Size:    16 [unused]
//   float4 avatar_position;            // Offset:  432 Size:    16
//   float4 avatar_direction;           // Offset:  448 Size:    16 [unused]
//   float time;                        // Offset:  464 Size:     4 [unused]
//   float delta_time;                  // Offset:  468 Size:     4 [unused]
//   float wind_frequency;              // Offset:  472 Size:     4 [unused]
//   float wind_strength;               // Offset:  476 Size:     4 [unused]
//   float rimlight_factor;             // Offset:  480 Size:     4 [unused]
//   float snow_factor;                 // Offset:  484 Size:     4 [unused]
//
// }
//
// cbuffer GRASS_CONSTANTS
// {
//
//   float grass_height_factor;         // Offset:    0 Size:     4 [unused]
//   float grass_width_factor;          // Offset:    4 Size:     4 [unused]
//   float grass_curvature;             // Offset:    8 Size:     4 [unused]
//   float grass_withered_factor;       // Offset:   12 Size:     4 [unused]
//   float grass_height_variance;       // Offset:   16 Size:     4 [unused]
//   float perlin_noise_distribution_factor;// Offset:   20 Size:     4 [unused]
//   float tesselation_max_subdivision; // Offset:   24 Size:     4
//   float tesselation_max_distance;    // Offset:   28 Size:     4
//   float4 grass_specular_color;       // Offset:   32 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// SCENE_CONSTANTS                   cbuffer      NA          NA            cb3      1 
// GRASS_CONSTANTS                   cbuffer      NA          NA            cb4      1 
//
//
//
// Patch Constant signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TessFactor            0   x           0  TRIEDGE   float   x   
// SV_TessFactor            1   x           1  TRIEDGE   float   x   
// SV_TessFactor            2   x           2  TRIEDGE   float   x   
// SV_InsideTessFactor      0   x           3   TRIINT   float   x   
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyzw
// TANGENT                  0   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyzw
// TANGENT                  0   xyzw        2     NONE   float   xyzw
//
// Tessellation Domain   # of control points
// -------------------- --------------------
// Triangle                                3
//
// Tessellation Output Primitive  Partitioning Type 
// ------------------------------ ------------------
// Clockwise Triangles            Integer           
//
hs_5_0
hs_decls 
dcl_input_control_point_count 3
dcl_output_control_point_count 3
dcl_tessellator_domain domain_tri
dcl_tessellator_partitioning partitioning_integer
dcl_tessellator_output_primitive output_triangle_cw
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB3[28], immediateIndexed
dcl_constantbuffer CB4[2], immediateIndexed
hs_control_point_phase 
dcl_input vOutputControlPointID
dcl_input v[3][0].xyzw
dcl_input v[3][1].xyzw
dcl_input v[3][2].xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 3
//
// Initial variable locations:
//   vOutputControlPointID.x <- output_control_point_id; 
//   vPrim.x <- primitive_id; 
//   o2.x <- <main return value>.world_tangent.x; o2.y <- <main return value>.world_tangent.y; o2.z <- <main return value>.world_tangent.z; o2.w <- <main return value>.world_tangent.w; 
//   o1.x <- <main return value>.world_normal.x; o1.y <- <main return value>.world_normal.y; o1.z <- <main return value>.world_normal.z; o1.w <- <main return value>.world_normal.w; 
//   o0.x <- <main return value>.world_position.x; o0.y <- <main return value>.world_position.y; o0.z <- <main return value>.world_position.z; o0.w <- <main return value>.world_position.w; 
//   v[0][0].x <- input_patch[0].world_position.x; v[0][0].y <- input_patch[0].world_position.y; v[0][0].z <- input_patch[0].world_position.z; v[0][0].w <- input_patch[0].world_position.w; 
//   v[0][1].x <- input_patch[0].world_normal.x; v[0][1].y <- input_patch[0].world_normal.y; v[0][1].z <- input_patch[0].world_normal.z; v[0][1].w <- input_patch[0].world_normal.w; 
//   v[0][2].x <- input_patch[0].world_tangent.x; v[0][2].y <- input_patch[0].world_tangent.y; v[0][2].z <- input_patch[0].world_tangent.z; v[0][2].w <- input_patch[0].world_tangent.w; 
//   v[1][0].x <- input_patch[1].world_position.x; v[1][0].y <- input_patch[1].world_position.y; v[1][0].z <- input_patch[1].world_position.z; v[1][0].w <- input_patch[1].world_position.w; 
//   v[1][1].x <- input_patch[1].world_normal.x; v[1][1].y <- input_patch[1].world_normal.y; v[1][1].z <- input_patch[1].world_normal.z; v[1][1].w <- input_patch[1].world_normal.w; 
//   v[1][2].x <- input_patch[1].world_tangent.x; v[1][2].y <- input_patch[1].world_tangent.y; v[1][2].z <- input_patch[1].world_tangent.z; v[1][2].w <- input_patch[1].world_tangent.w; 
//   v[2][0].x <- input_patch[2].world_position.x; v[2][0].y <- input_patch[2].world_position.y; v[2][0].z <- input_patch[2].world_position.z; v[2][0].w <- input_patch[2].world_position.w; 
//   v[2][1].x <- input_patch[2].world_normal.x; v[2][1].y <- input_patch[2].world_normal.y; v[2][1].z <- input_patch[2].world_normal.z; v[2][1].w <- input_patch[2].world_normal.w; 
//   v[2][2].x <- input_patch[2].world_tangent.x; v[2][2].y <- input_patch[2].world_tangent.y; v[2][2].z <- input_patch[2].world_tangent.z; v[2][2].w <- input_patch[2].world_tangent.w
//
#line 42 "C:\Users\2220411\Desktop\課題\自作ライブラリ\描画とゲープロmark2\描画とゲープロ\HLSL\grass_hs.hlsl"
mov r0.x, vOutputControlPointID
mov r1.xyzw, v[r0.x + 0][0].xyzw  // r1.x <- output.world_position.x; r1.y <- output.world_position.y; r1.z <- output.world_position.z; r1.w <- output.world_position.w
mov r2.xyzw, v[r0.x + 0][1].xyzw  // r2.x <- output.world_normal.x; r2.y <- output.world_normal.y; r2.z <- output.world_normal.z; r2.w <- output.world_normal.w
mov r0.xyzw, v[r0.x + 0][2].xyzw  // r0.x <- output.world_tangent.x; r0.y <- output.world_tangent.y; r0.z <- output.world_tangent.z; r0.w <- output.world_tangent.w

#line 43
mov o0.xyzw, r1.xyzw
mov o1.xyzw, r2.xyzw
mov o2.xyzw, r0.xyzw
ret 
hs_join_phase 
dcl_input vicp[3][0].xyz
dcl_output_siv o0.x, finalTriUeq0EdgeTessFactor
dcl_output_siv o1.x, finalTriVeq0EdgeTessFactor
dcl_output_siv o2.x, finalTriWeq0EdgeTessFactor
dcl_output_siv o3.x, finalTriInsideTessFactor
dcl_temps 1

#line 17
add r0.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
add r0.xyz, r0.xyzx, vicp[2][0].xyzx
div r0.xyz, r0.xyzx, l(3.000000, 3.000000, 3.000000, 0.000000)  // r0.x <- midpoint.x; r0.y <- midpoint.y; r0.z <- midpoint.z

#line 18
mov r0.xyz, -r0.xyzx
add r0.xyz, r0.xyzx, cb3[27].xyzx
dp3 r0.x, r0.xyzx, r0.xyzx
sqrt r0.x, r0.x  // r0.x <- distance

#line 19
mov r0.x, -r0.x
add r0.x, r0.x, cb4[1].w
div r0.x, r0.x, cb4[1].w
max r0.x, r0.x, l(0.000000)
min r0.x, r0.x, l(1.000000)  // r0.x <- subdivision_factor

#line 20
mul r0.x, r0.x, cb4[1].z
add r0.x, r0.x, l(1.000000)  // r0.x <- subdivision

#line 24
mov r0.x, r0.x  // r0.x <- output.tess_factor[0]

#line 25
mov r0.y, r0.x  // r0.y <- output.tess_factor[1]

#line 26
mov r0.z, r0.x  // r0.z <- output.tess_factor[2]

#line 27
mov r0.x, r0.x  // r0.x <- output.inside_tess_factor

#line 28
mov o0.x, r0.x
mov o1.x, r0.y
mov o2.x, r0.z
mov o3.x, r0.x
ret 
// Approximately 31 instruction slots used
