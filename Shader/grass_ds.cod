//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
//
// Patch Constant signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TessFactor            0   x           0  TRIEDGE   float       
// SV_TessFactor            1   x           1  TRIEDGE   float       
// SV_TessFactor            2   x           2  TRIEDGE   float       
// SV_InsideTessFactor      0   x           3   TRIINT   float       
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// TANGENT                  0   xyzw        2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyzw
// TANGENT                  0   xyzw        2     NONE   float   xyzw
//
// Tessellation Domain   # of control points
// -------------------- --------------------
// Triangle                                3
//
ds_5_0
dcl_input_control_point_count 3
dcl_tessellator_domain domain_tri
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_input vDomain.xyz
dcl_input vicp[3][0].xyz
dcl_input vicp[3][1].xyz
dcl_input vicp[3][2].xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 4
//
// Initial variable locations:
//   vpc3.x <- input.inside_tess_factor; 
//   vpc0.x <- input.tess_factor[0]; 
//   vpc1.x <- input.tess_factor[1]; 
//   vpc2.x <- input.tess_factor[2]; 
//   vDomain.x <- domain.x; vDomain.y <- domain.y; vDomain.z <- domain.z; 
//   o2.x <- <main return value>.world_tangent.x; o2.y <- <main return value>.world_tangent.y; o2.z <- <main return value>.world_tangent.z; o2.w <- <main return value>.world_tangent.w; 
//   o1.x <- <main return value>.world_normal.x; o1.y <- <main return value>.world_normal.y; o1.z <- <main return value>.world_normal.z; o1.w <- <main return value>.world_normal.w; 
//   o0.x <- <main return value>.world_position.x; o0.y <- <main return value>.world_position.y; o0.z <- <main return value>.world_position.z; o0.w <- <main return value>.world_position.w; 
//   vicp[0][0].x <- patch[0].world_position.x; vicp[0][0].y <- patch[0].world_position.y; vicp[0][0].z <- patch[0].world_position.z; vicp[0][0].w <- patch[0].world_position.w; 
//   vicp[0][1].x <- patch[0].world_normal.x; vicp[0][1].y <- patch[0].world_normal.y; vicp[0][1].z <- patch[0].world_normal.z; vicp[0][1].w <- patch[0].world_normal.w; 
//   vicp[0][2].x <- patch[0].world_tangent.x; vicp[0][2].y <- patch[0].world_tangent.y; vicp[0][2].z <- patch[0].world_tangent.z; vicp[0][2].w <- patch[0].world_tangent.w; 
//   vicp[1][0].x <- patch[1].world_position.x; vicp[1][0].y <- patch[1].world_position.y; vicp[1][0].z <- patch[1].world_position.z; vicp[1][0].w <- patch[1].world_position.w; 
//   vicp[1][1].x <- patch[1].world_normal.x; vicp[1][1].y <- patch[1].world_normal.y; vicp[1][1].z <- patch[1].world_normal.z; vicp[1][1].w <- patch[1].world_normal.w; 
//   vicp[1][2].x <- patch[1].world_tangent.x; vicp[1][2].y <- patch[1].world_tangent.y; vicp[1][2].z <- patch[1].world_tangent.z; vicp[1][2].w <- patch[1].world_tangent.w; 
//   vicp[2][0].x <- patch[2].world_position.x; vicp[2][0].y <- patch[2].world_position.y; vicp[2][0].z <- patch[2].world_position.z; vicp[2][0].w <- patch[2].world_position.w; 
//   vicp[2][1].x <- patch[2].world_normal.x; vicp[2][1].y <- patch[2].world_normal.y; vicp[2][1].z <- patch[2].world_normal.z; vicp[2][1].w <- patch[2].world_normal.w; 
//   vicp[2][2].x <- patch[2].world_tangent.x; vicp[2][2].y <- patch[2].world_tangent.y; vicp[2][2].z <- patch[2].world_tangent.z; vicp[2][2].w <- patch[2].world_tangent.w
//
#line 16 "C:\Users\2220411\Desktop\課題\自作ライブラリ\描画とゲープロmark2\描画とゲープロ\HLSL\grass_ds.hlsl"
mul r0.xyz, vDomain.xxxx, vicp[0][0].xyzx
mul r1.xyz, vDomain.yyyy, vicp[1][0].xyzx
add r0.xyz, r0.xyzx, r1.xyzx
mul r1.xyz, vDomain.zzzz, vicp[2][0].xyzx
add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- output.world_position.x; r0.y <- output.world_position.y; r0.z <- output.world_position.z

#line 17
itof r0.w, l(1)  // r0.w <- output.world_position.w

#line 19
mul r1.xyz, vDomain.xxxx, vicp[0][1].xyzx
mul r2.xyz, vDomain.yyyy, vicp[1][1].xyzx
add r1.xyz, r1.xyzx, r2.xyzx
mul r2.xyz, vDomain.zzzz, vicp[2][1].xyzx
add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- output.world_normal.x; r1.y <- output.world_normal.y; r1.z <- output.world_normal.z

#line 20
itof r1.w, l(0)  // r1.w <- output.world_normal.w

#line 22
mul r2.xyz, vDomain.xxxx, vicp[0][2].xyzx
mul r3.xyz, vDomain.yyyy, vicp[1][2].xyzx
add r2.xyz, r2.xyzx, r3.xyzx
mul r3.xyz, vDomain.zzzz, vicp[2][2].xyzx
add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- output.world_tangent.x; r2.y <- output.world_tangent.y; r2.z <- output.world_tangent.z

#line 23
itof r2.w, l(0)  // r2.w <- output.world_tangent.w

#line 25
mov o0.xyz, r0.xyzx
mov o0.w, r0.w
mov o1.xyz, r1.xyzx
mov o1.w, r1.w
mov o2.xyz, r2.xyzx
mov o2.w, r2.w
ret 
// Approximately 25 instruction slots used
